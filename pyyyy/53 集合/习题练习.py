# 1、请用代码实现：利用下划线将列表的每一个元素拼接成字符串，li = ['alex', 'eric', 'rain']
# li = ['alex', 'eric', 'rain']
# print("_".join(li))


# 2、查找列表中元素，移除每个元素的空格，并查找以a或A开头并且以c结尾的所有元素。
# li = ["alec", " aric", "Alex", "Tony", "rain"]
# 　　tu = ("alec", " aric", "Alex", "Tony", "rain")
# 　　dic = {'k1': "alex", 'k2': " aric", "k3": "Alex", "k4": "Tony"}
# for i in li:
#     I = i.strip()
#     if (I.startswith("a") or I.startswith("A")) and I.endswith("c"):
#         print(I)


# 3、写代码，有如下列表，按照要求实现每一个功能
# li = ['alex', 'eric', 'rain']
# 　　计算列表长度并输出
# print(len(li))
# 　　列表中追加元素“seven”，并输出添加后的列表
# li.append("seven")
# print(li)
# 　　请在列表的第1个位置插入元素“Tony”，并输出添加后的列表
# li.insert(0, "Tony")
# print(li)
# 　　请修改列表第2个位置的元素为“Kelly”，并输出修改后的列表
# li[1] = "Kelly"
# print(li)
# 　　请删除列表中的元素“eric”，并输出修改后的列表
# li.remove("eric")
# print(li)
# 　　请删除列表中的第2个元素，并输出删除的元素的值和删除元素后的列表
# print(li.pop(1))
# print(li)
# 　　请删除列表中的第3个元素，并输出删除元素后的列表
# del li[2]
# print(li)
# 　　请删除列表中的第2至4个元素，并输出删除元素后的列表
# del li[1:4]
# print(li)
# 　　请将列表所有的元素反转，并输出反转后的列表
# print(li[::-1])
# li.reverse()
# print(li)
# 　　请使用for、len、range输出列表的索引
# for i in range(len(li)):
#     print(i)
# 　　请使用enumrate输出列表元素和序号（序号从100开始）
# for i, j in enumerate(li, 100):
#     print(i, j)
# 　　请使用for循环输出列表的所有元素
# for i in li:
#     print(i)


# 4、写代码，有如下列表，请按照功能要求实现每一个功能
# 　　li = ["hello", 'seven', ["mon", ["h", "kelly"], 'all'], 123, 446]
# 　　请根据索引输出“Kelly”
# 　　请使用索引找到'all'元素并将其修改为“ALL”，如：li[0][1][9]...

# 5、写代码，有如下元组，请按照功能要求实现每一个功能
# 　　tu＝('alex', 'eric', 'rain')
# 　　计算元组长度并输出
# 　　获取元组的第2个元素，并输出
# 　　获取元组的第1-2个元素，并输出
# 　　请使用for输出元组的元素
# 　　请使用for、len、range输出元组的索引
# 　　请使用enumrate输出元祖元素和序号（序号从10开始）

# 6、有如下变量，请实现要求的功能
# 　　tu = ("alex", [11, 22, {"k1": 'v1', "k2": ["age", "name"], "k3": (11,22,33)}, 44])
# 　　讲述元祖的特性
# 　　请问tu变量中的第一个元素“alex”是否可被修改？
# 　　请问tu变量中的"k2"对应的值是什么类型？是否可以被修改？如果可以，请在其中添加一个元素“Seven”
# 　　请问tu变量中的"k3"对应的值是什么类型？是否可以被修改？如果可以，请在其中添加一个元素“Seven”

# 7、字典
#     dic = {'k1': "v1", "k2": "v2", "k3": [11,22,33]}
# 　　请循环输出所有的key
# 　　请循环输出所有的value
# 　　请循环输出所有的key和value
# 　　请在字典中添加一个键值对，"k4": "v4"，输出添加后的字典
# 　　请在修改字典中“k1”对应的值为“alex”，输出修改后的字典
# 　　请在k3对应的值中追加一个元素44，输出修改后的字典
# 　　请在k3对应的值的第1个位置插入个元素18，输出修改后的字典

# 8、转换
# 　　将字符串s = "alex"转换成列表
# 　　将字符串s = "alex"转换成元祖
# 　　将列表li = ["alex", "seven"]转换成元组
# 　　将元祖tu = ('Alex', "seven")转换成列表
# 　　将列表li = ["alex", "seven"]转换成字典且字典的key按照10开始向后递增
# li = ["alex", "seven"]
# d = {}
# for i, j in enumerate(li, 10):
#     d[i] = j
# print(d)


# 9、元素分类
# 　　有如下值集合[11,22,33,44,55,66,77,88,99,90]，将所有大于66的值保存至字典的第一个key中，将小于66的值保存至第二个key的值中。
# 　　即：{'k1':大于66的所有值, 'k2':小于66的所有值}
# {"k1": [77, 88, 99, 90], "k2": [11, 22, 33, 44, 55]}
# l = [11, 22, 33, 44, 55, 66, 77, 88, 99, 90]
# l1 = []
# l2 = []
# d = {}
# for i in l:
#     if i > 66:
#         l1.append(i)
#     elif i < 66:
#         l2.append(i)
# d["k1"] = l1
# d["k2"] = l2
# print(d)

# 10、输出商品列表，用户输入序号，显示用户选中的商品
# 　　商品li = ["手机", "电脑", '鼠标垫', '游艇']
# 　　允许用户添加商品
# 　　用户输入序号显示内容

# 11、用户交互显示类似省市县N级联动的选择
# 　　允许用户增加内容
# 　　允许用户选择查看某一个级别内容

# 12、列举布尔值是False的所有值

# 13、有两个列表
# 　　l1 = [11,22,33]
# 　　l2 = [22,33,44]
# 　　获取内容相同的元素列表
# 　　获取l1中有，l2中没有的元素列表
# 　　获取l2中有，l1中没有的元素列表
# 　　获取l1和l2中内容都不同的元素

# 14、利用For循环和range输出
# 　　For循环从小到大输出1 - 100
# 　　For循环从大到小输出100 - 1
# 　　While循环从小到大输出1 - 100
# 　　While循环从大到小输出100 - 1


# 15、编程题：
# 　　在不改变列表数据结构的情况下找最大值li = [1,3,2,7,6,23,41,243,33,85,56]
# li = [1, 3, 2, 7, 6, 23, 41, 243, 33, 85, 56]
# print(sorted(li)[-1])
# print(max(li))

# 　　在不改变列表中数据排列结构的前提下，找出以下列表中最接近最大值和最小值的平均值的数li = [-100,1,3,2,7,6,120,121,140,23,411,99,243,33,85,56]
# li = [-100, 1, 3, 2, 7, 6, 120, 121, 140, 23, 411, 99, 243, 33, 85, 56]
# print((sorted(li)[-1] + sorted(li)[0]) / 2)
# print((max(li) + min(li)) / 2)

# 　　利用for循环和range输出9 * 9乘法表
# for hang in range(1, 10):
#     for lie in range(1, hang + 1):
#         print("%d*%d=%-4d" % (lie, hang, lie * hang), end="")
#     print()

# 　　求100以内的质数和。
# sum = 0
# for i in range(2, 101):
#     for j in range(2, i):
#         if i % j == 0:
#             break
#     else:
#         sum += i
# print(sum)
